// Prisma schema matching docs/Database.md
// To migrate: npx prisma migrate dev (dev), npx prisma migrate deploy (prod)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  system
  user
  assistant
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  threads        Thread[]
  accounts       Account[]
  sessions       Session[]
}

model Thread {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String?
  activeModel String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]

  @@index([userId, updatedAt])
}

model Message {
  id          String    @id @default(cuid())
  threadId    String
  thread      Thread    @relation(fields: [threadId], references: [id], onDelete: Cascade)
  role        Role
  contentText String
  provider    String?
  model       String?
  usageJson   Json?
  metaJson    Json?
  createdAt   DateTime  @default(now())

  @@index([threadId, createdAt])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
